#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -e            # fail fast
set -o pipefail   # do not ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2

OPENRESTY_VERSION=1.9.3.1

compile_buildpack_dir=$(cd $(dirname $0); cd ..; pwd)
compile_buildpack_bin=$compile_buildpack_dir/bin
$compile_buildpack_dir/compile-extensions/bin/check_stack_support

$compile_buildpack_dir/compile-extensions/bin/check_buildpack_version $compile_buildpack_dir $cache_dir

OPENRESTY_PREFIX=$build_dir/openresty
NGINX_PREFIX=$build_dir/openresty/nginx

# Load some convenience functions like status(), echo(), and indent()
source $compile_buildpack_dir/bin/common.sh

BUILDPACK_PATH=$compile_buildpack_dir source $compile_buildpack_dir/compile-extensions/lib/common

# default_nginx_version="$($compile_buildpack_dir/compile-extensions/bin/default_version_for $compile_buildpack_dir/manifest.yml nginx)"
# echo "Using Nginx version $default_nginx_version"
#
# translated_url=$($compile_buildpack_dir/compile-extensions/bin/download_dependency nginx-$default_nginx_version.tgz /tmp)
# echo "Downloaded [$translated_url]"
#
# compile_nginx_tgz="/tmp/nginx-$default_nginx_version.tgz"
cd $build_dir

# Alternate root location (default is root of project) for html/js/css
# root: dist/
if [[ -e "Staticfile" && "$(grep 'root:' Staticfile)X" != "X" ]]; then
  root_dir=$(grep 'root:' Staticfile | sed -e 's/^root: *//;s/\s*$//')
  status "Root folder $root_dir"
else
  status "Using root folder"
fi
root_dir=${root_dir:-.}
if [[ ! -e ${root_dir} ]] ; then
  error "the application Staticfile specifies a root directory \`${root_dir}\` that does not exist"
fi
if [[ ! -d ${root_dir} ]] ; then
  error "the application Staticfile specifies a root directory \`${root_dir}\` that is a plain file, but was expected to be a directory"
fi

if [[ -e "Staticfile" && "$(grep 'host_dot_files: true' Staticfile)X" != "X" ]]; then
  host_dotfiles=true
else
  host_dotfiles=false
fi

status "Copying project files into public/"
shopt -s extglob
root_dir_absolute=`cd $root_dir 2>/dev/null && pwd -P`
if [ ${build_dir}/public != ${root_dir_absolute} ]; then
  tmp_dir=`mktemp -d /tmp/XXXXX`

  if [[ "$host_dotfiles" = true ]]; then
    shopt -s dotglob
    mv $root_dir_absolute/!(Staticfile|Staticfile.auth|manifest.yml|stackato.yml|.profile|.|..) $tmp_dir || true
  else
    mv $root_dir_absolute/!(Staticfile|Staticfile.auth|manifest.yml|stackato.yml) $tmp_dir || true
  fi

  rm -rf $build_dir/public
  mv $tmp_dir  $build_dir/public
fi
shopt -u extglob
shopt -u dotglob

export PATH="$PATH:/usr/local/sbin:/usr/sbin/:/sbin"

status "==> Downloading OpenResty..." \
 && curl -sSL http://openresty.org/download/ngx_openresty-${OPENRESTY_VERSION}.tar.gz | tar -xvz \
 && echo "==> Configuring OpenResty..." \
 && cd ngx_openresty-* \
 && readonly NPROC=$(grep -c ^processor /proc/cpuinfo 2>/dev/null || 1) \
 && echo "using upto $NPROC threads" \
 && ./configure \
    --prefix=$OPENRESTY_PREFIX \
    --http-client-body-temp-path=$NGINX_PREFIX/client_body_temp \
    --http-proxy-temp-path=$NGINX_PREFIX/proxy_temp \
    --http-log-path=$NGINX_PREFIX/access.log \
    --error-log-path=$NGINX_PREFIX/error.log \
    --pid-path=$NGINX_PREFIX/nginx.pid \
    --lock-path=$NGINX_PREFIX/nginx.lock \
    --with-luajit \
    --with-pcre-jit \
    --with-ipv6 \
    --with-http_ssl_module \
    --without-http_ssi_module \
    --without-http_userid_module \
    --without-http_fastcgi_module \
    --without-http_uwsgi_module \
    --without-http_scgi_module \
    --without-http_memcached_module \
    -j${NPROC} \
 && echo "==> Building OpenResty..." \
 && make -j${NPROC} \
 && echo "==> Installing OpenResty..." \
 && make install \
 && echo "==> Finishing..." \
 # && ln -sf $NGINX_PREFIX/sbin/nginx nginx \
 # && ln -sf $NGINX_PREFIX/sbin/nginx openresty \
 # && ln -sf $OPENRESTY_PREFIX/bin/resty resty \
 # && ln -sf $OPENRESTY_PREFIX/luajit/bin/luajit-* $OPENRESTY_PREFIX/luajit/bin/lua \
 # && ln -sf $OPENRESTY_PREFIX/luajit/bin/luajit-* lua \

cd $build_dir

cp $compile_buildpack_bin/boot.sh .

echo "openresty"
echo $OPENRESTY_PREFIX

$compile_buildpack_dir/compile-extensions/bin/store_buildpack_metadata $compile_buildpack_dir $cache_dir

echo "---->"
